{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\winco\\\\Desktop\\\\javascripts\\\\SKKUBird\\\\front\\\\Components\\\\PostCard\\\\CommentForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport Form from \"antd/lib/form/Form\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../Hooks/useInput\";\nimport { Input, Button } from \"antd\";\n\nconst CommentForm = ({\n  post\n}) => {\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const [commentText, onChangeCommentText] = useInput(\" \");\n  const onSubmitComment = useCallback(() => {\n    console.log(post.id + commentText);\n  }, [commentText]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, \"\\uC090\\uC57D\"));\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/Components/PostCard/CommentForm.js"],"names":["React","useCallback","Form","useSelector","PropTypes","useInput","Input","Button","CommentForm","post","id","state","user","me","commentText","onChangeCommentText","onSubmitComment","console","log","propTypes","shape","number","User","object","content","string","createdAt","Comments","arrayOf","Images","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAMC,EAAE,GAAGP,WAAW,CAAEQ,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;AACA,QAAM,CAACI,WAAD,EAAcC,mBAAd,IAAqCV,QAAQ,CAAC,GAAD,CAAnD;AACA,QAAMW,eAAe,GAAGf,WAAW,CAAC,MAAM;AACxCgB,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACC,EAAL,GAAUI,WAAtB;AACD,GAFkC,EAEhC,CAACA,WAAD,CAFgC,CAAnC;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEE,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,KAAK,EAAEF,WADT;AAEE,IAAA,QAAQ,EAAEC,mBAFZ;AAGE,IAAA,IAAI,EAAE,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,CADF;AAYD,CAnBD;;AAqBAP,WAAW,CAACW,SAAZ,GAAwB;AACtBV,EAAAA,IAAI,EAAEL,SAAS,CAACgB,KAAV,CAAgB;AACpBV,IAAAA,EAAE,EAAEN,SAAS,CAACiB,MADM;AAEpBC,IAAAA,IAAI,EAAElB,SAAS,CAACmB,MAFI;AAGpBC,IAAAA,OAAO,EAAEpB,SAAS,CAACqB,MAHC;AAIpBC,IAAAA,SAAS,EAAEtB,SAAS,CAACmB,MAJD;AAKpBI,IAAAA,QAAQ,EAAEvB,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACmB,MAA5B,CALU;AAMpBM,IAAAA,MAAM,EAAEzB,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACmB,MAA5B;AANY,GAAhB,EAOHO;AARmB,CAAxB;AAWA,eAAetB,WAAf","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport Form from \"antd/lib/form/Form\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useInput from \"../Hooks/useInput\";\r\nimport { Input, Button } from \"antd\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const [commentText, onChangeCommentText] = useInput(\" \");\r\n  const onSubmitComment = useCallback(() => {\r\n    console.log(post.id + commentText);\r\n  }, [commentText]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Input.TextArea\r\n        value={commentText}\r\n        onChange={onChangeCommentText}\r\n        rows={4}\r\n      />\r\n      <Button type=\"primary\" htmlType=\"submit\">\r\n        삐약\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}
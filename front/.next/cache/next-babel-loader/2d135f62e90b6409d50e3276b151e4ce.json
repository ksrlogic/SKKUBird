{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../actions\"; // function addPostAPI() {\n//   return axios.post(\"/api/post\");\n// }\n\nfunction* addComment({\n  data\n}) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data //\tresult.data 고정\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data //\terr.response.data 고정\n\n    });\n  }\n}\n\nfunction* addPost({\n  data\n}) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: data\n      } //\tresult.data 고정\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data //\terr.response.data 고정\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost)]);\n}","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addComment","data","type","err","response","addPost","id","generate","content","watchAddPost","watchCommentPost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SACCC,gBADD,EAECC,gBAFD,EAGCC,gBAHD,EAICC,mBAJD,EAKCC,mBALD,EAMCC,mBAND,EAOCC,cAPD,EAQCC,mBARD,EASCC,mBATD,EAUCC,mBAVD,QAWO,YAXP,C,CAaA;AACA;AACA;;AAEA,UAAUC,UAAV,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAA+B;AAC9B,MAAI;AACH;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACTgB,MAAAA,IAAI,EAAER,mBADG;AAETO,MAAAA,IAFS,CAEH;;AAFG,KAAD,CAAT;AAIA,GAPD,CAOE,OAAOE,GAAP,EAAY;AACb,UAAMjB,GAAG,CAAC;AACTgB,MAAAA,IAAI,EAAEP,mBADG;AAETM,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH,IAFV,CAEgB;;AAFhB,KAAD,CAAT;AAIA;AACD;;AACD,UAAUI,OAAV,CAAkB;AAAEJ,EAAAA;AAAF,CAAlB,EAA4B;AAC3B,MAAI;AACH;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMkB,EAAE,GAAGjB,OAAO,CAACkB,QAAR,EAAX;AACA,UAAMrB,GAAG,CAAC;AACTgB,MAAAA,IAAI,EAAEX,gBADG;AAETU,MAAAA,IAAI,EAAE;AACLK,QAAAA,EADK;AAELE,QAAAA,OAAO,EAAEP;AAFJ,OAFG,CAKN;;AALM,KAAD,CAAT;AAOA,UAAMf,GAAG,CAAC;AACTgB,MAAAA,IAAI,EAAEN,cADG;AAETK,MAAAA,IAAI,EAAEK;AAFG,KAAD,CAAT;AAIA,GAfD,CAeE,OAAOH,GAAP,EAAY;AACb,UAAMjB,GAAG,CAAC;AACTgB,MAAAA,IAAI,EAAEV,gBADG;AAETS,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH,IAFV,CAEgB;;AAFhB,KAAD,CAAT;AAIA;AACD;;AAED,UAAUQ,YAAV,GAAyB;AACxB,QAAMtB,UAAU,CAACG,gBAAD,EAAmBe,OAAnB,CAAhB;AACA;;AAED,UAAUK,gBAAV,GAA6B;AAC5B,QAAMvB,UAAU,CAACM,mBAAD,EAAsBO,UAAtB,CAAhB;AACA;;AACD,eAAe,UAAUW,QAAV,GAAqB;AACnC,QAAM3B,GAAG,CAAC,CAACC,IAAI,CAACwB,YAAD,CAAL,EAAqBxB,IAAI,CAACyB,gBAAD,CAAzB,CAAD,CAAT;AACA","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\n\r\nimport {\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n} from \"../actions\";\r\n\r\n// function addPostAPI() {\r\n//   return axios.post(\"/api/post\");\r\n// }\r\n\r\nfunction* addComment({ data }) {\r\n\ttry {\r\n\t\t// const result = yield call(addPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata, //\tresult.data 고정\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\tdata: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\nfunction* addPost({ data }) {\r\n\ttry {\r\n\t\t// const result = yield call(addPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tconst id = shortid.generate();\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: {\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: data,\r\n\t\t\t}, //\tresult.data 고정\r\n\t\t});\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\tdata: id,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\tdata: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga() {\r\n\tyield all([fork(watchAddPost), fork(watchCommentPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
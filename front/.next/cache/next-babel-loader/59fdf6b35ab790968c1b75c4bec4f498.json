{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signup),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../actions\"; // import axios from \"axios\";\n// function loginAPI(data) {\n//   return axios.post(\"/api/login\", data);\n// }\n// function logoutAPI() {\n//   return axios.post(\"/api/logout\");\n// }\n\nfunction signupAPI() {\n  return axios.post(\"http:localhost:3075/user/signup\");\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: {} //\tresult.data 고정\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data //\terr.response.data 고정\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS //   data: result.data, //result.data 고정\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data //  err.response.data 고정\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signup() {\n  var result;\n  return _regeneratorRuntime.wrap(function signup$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signupAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS //   data: result.data,\n\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signup);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), //  call\n          fork(watchLogout), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/sagas/user.js"],"names":["login","logout","signup","watchLogin","watchLogout","watchSignup","userSaga","all","fork","put","takeLatest","delay","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signupAPI","post","type","data","error","response","call","result"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\nimport axios from 'axios'\r\nimport {\r\n\tLOG_IN_SUCCESS,\r\n\tLOG_IN_FAILURE,\r\n\tLOG_OUT_SUCCESS,\r\n\tLOG_OUT_FAILURE,\r\n\tLOG_IN_REQUEST,\r\n\tLOG_OUT_REQUEST,\r\n\tSIGN_UP_REQUEST,\r\n\tSIGN_UP_SUCCESS,\r\n\tSIGN_UP_FAILURE,\r\n} from \"../actions\";\r\n// import axios from \"axios\";\r\n\r\n// function loginAPI(data) {\r\n//   return axios.post(\"/api/login\", data);\r\n// }\r\n\r\n// function logoutAPI() {\r\n//   return axios.post(\"/api/logout\");\r\n// }\r\n\r\nfunction signupAPI() {\r\n  return axios.post(\"http:localhost:3075/user/signup\")\r\n}\r\n\r\nfunction* login() {\r\n\ttry {\r\n\t\t// const result = yield call(loginAPI, action.data); // 그냥 인자로 넘기면 알아서 들어감. 더받고싶으면 더 넣으면 댐\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\r\n\t\t\tdata: {}, //\tresult.data 고정\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_FAILURE,\r\n\t\t\terror: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction* logout() {\r\n\ttry {\r\n\t\t// const result = yield call(logoutAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: LOG_OUT_SUCCESS,\r\n\t\t\t//   data: result.data, //result.data 고정\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: LOG_OUT_FAILURE,\r\n\t\t\terror: err.response.data, //  err.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\nfunction* signup() {\r\n\ttry {\r\n\t\tconst result = yield call(signupAPI);\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_SUCCESS,\r\n\t\t\t//   data: result.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_FAILURE,\r\n\t\t\terror: err.data,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction* watchLogin() {\r\n\tyield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n\tyield takeLatest(LOG_OUT_REQUEST, logout);\r\n}\r\nfunction* watchSignup() {\r\n\tyield takeLatest(SIGN_UP_REQUEST, signup);\r\n}\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogin), //  call\r\n\t\tfork(watchLogout),\r\n\t\tfork(watchSignup),\r\n\t]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchCommentPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../actions\"; // function addPostAPI() {\n//   return axios.post(\"/api/post\");\n// }\n\nfunction addComment(data) {\n  return _regeneratorRuntime.wrap(function addComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: data //result.data 고정\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context.t0.response.data //err.response.data 고정\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addPost(_ref) {\n  var data;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          data = _ref.data;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: data //result.data 고정\n\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data //err.response.data 고정\n\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchCommentPost() {\n  return _regeneratorRuntime.wrap(function watchCommentPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchCommentPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/sagas/post.js"],"names":["addComment","addPost","watchAddPost","watchCommentPost","postSaga","all","fork","put","takeLatest","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","data","type","response"],"mappings":";;oDAeUA,U;qDAeAC,O;qDAgBAC,Y;qDAIAC,gB;qDAGeC,Q;;AArDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AAEA,SACCC,gBADD,EAECC,gBAFD,EAGCC,gBAHD,EAICC,mBAJD,EAKCC,mBALD,EAMCC,mBAND,QAOO,YAPP,C,CASA;AACA;AACA;;AAEA,SAAUf,UAAV,CAAqBgB,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMF,GAAG,CAAC;AACTU,YAAAA,IAAI,EAAEH,mBADG;AAETE,YAAAA,IAAI,EAAEA,IAFG,CAEG;;AAFH,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMT,GAAG,CAAC;AACTU,YAAAA,IAAI,EAAEF,mBADG;AAETC,YAAAA,IAAI,EAAE,YAAIE,QAAJ,CAAaF,IAFV,CAEgB;;AAFhB,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUf,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoBe,UAAAA,IAApB,QAAoBA,IAApB;AAAA;AAAA;AAGE,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMF,GAAG,CAAC;AACTU,YAAAA,IAAI,EAAEN,gBADG;AAETK,YAAAA,IAAI,EAAEA,IAFG,CAEG;;AAFH,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMT,GAAG,CAAC;AACTU,YAAAA,IAAI,EAAEL,gBADG;AAETI,YAAAA,IAAI,EAAE,aAAIE,QAAJ,CAAaF,IAFV,CAEgB;;AAFhB,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUd,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMM,UAAU,CAACE,gBAAD,EAAmBT,OAAnB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMK,UAAU,CAACK,mBAAD,EAAsBb,UAAtB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,YAAD,CAAL,EAAqBI,IAAI,CAACH,gBAAD,CAAzB,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\n\r\nimport {\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_COMMENT_FAILURE,\r\n} from \"../actions\";\r\n\r\n// function addPostAPI() {\r\n//   return axios.post(\"/api/post\");\r\n// }\r\n\r\nfunction* addComment(data) {\r\n\ttry {\r\n\t\t// const result = yield call(addPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata: data, //result.data 고정\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\tdata: err.response.data, //err.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\nfunction* addPost({ data }) {\r\n\ttry {\r\n\t\t// const result = yield call(addPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: data, //result.data 고정\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\tdata: err.response.data, //err.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga() {\r\n\tyield all([fork(watchAddPost), fork(watchCommentPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
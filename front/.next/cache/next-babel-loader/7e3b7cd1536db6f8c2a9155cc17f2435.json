{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\"; // function addPostAPI() {\n//   return axios.post(\"/api/post\");\n// }\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"ADD_POST_SUCCESS\",\n            data: {\n              id: 2,\n              content: \"\\uB354\\uBBF8\\uB370\\uC774\\uD130\",\n              User: {\n                id: 1,\n                nickname: \"안녕!\"\n              },\n              Images: [],\n              Comments: []\n            } //result.data 고정\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: _context.t0.response.data //err.response.data 고정\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","put","takeLatest","delay","type","data","id","content","User","nickname","Images","Comments","response"],"mappings":";;oDAMUA,O;qDAyBAC,Y;qDAIeC,Q;;AAnCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD,C,CAEA;AACA;AACA;;AAEA,SAAUP,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,GAAG,CAAC;AACRG,YAAAA,IAAI,EAAE,kBADE;AAERC,YAAAA,IAAI,EAAE;AACJC,cAAAA,EAAE,EAAE,CADA;AAEJC,cAAAA,OAAO,kCAFH;AAGJC,cAAAA,IAAI,EAAE;AACJF,gBAAAA,EAAE,EAAE,CADA;AAEJG,gBAAAA,QAAQ,EAAE;AAFN,eAHF;AAOJC,cAAAA,MAAM,EAAE,EAPJ;AAQJC,cAAAA,QAAQ,EAAE;AARN,aAFE,CAWL;;AAXK,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkBI,iBAAMV,GAAG,CAAC;AACRG,YAAAA,IAAI,EAAE,kBADE;AAERC,YAAAA,IAAI,EAAE,YAAIO,QAAJ,CAAaP,IAFX,CAEiB;;AAFjB,WAAD,CAAT;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAUR,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAAC,kBAAD,EAAqBN,OAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\n\r\n// function addPostAPI() {\r\n//   return axios.post(\"/api/post\");\r\n// }\r\n\r\nfunction* addPost() {\r\n  try {\r\n    // const result = yield call(addPostAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"ADD_POST_SUCCESS\",\r\n      data: {\r\n        id: 2,\r\n        content: `더미데이터`,\r\n        User: {\r\n          id: 1,\r\n          nickname: \"안녕!\",\r\n        },\r\n        Images: [],\r\n        Comments: [],\r\n      }, //result.data 고정\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"ADD_POST_FAILURE\",\r\n      data: err.response.data, //err.response.data 고정\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
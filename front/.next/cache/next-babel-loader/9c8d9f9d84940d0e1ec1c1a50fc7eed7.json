{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\winco\\\\Desktop\\\\javascripts\\\\SKKUBird\\\\front\\\\Components\\\\PostCard\\\\CommentForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from \"react\";\nimport Form from \"antd/lib/form/Form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport { Input, Button } from \"antd\";\nimport { ADD_COMMENT_REQUEST } from \"../../actions\";\n\nconst CommentForm = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    addCommentDone\n  } = useSelector(state => state.post);\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\" \");\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    console.log(post.id + commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"\\uC090\\uC57D\"));\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/Components/PostCard/CommentForm.js"],"names":["React","useCallback","useEffect","Form","useDispatch","useSelector","PropTypes","useInput","Input","Button","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","commentText","onChangeCommentText","setCommentText","onSubmitComment","console","log","type","data","content","postId","userId","propTypes","shape","number","User","object","string","createdAt","Comments","arrayOf","Images","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;AACA,SAASC,mBAAT,QAAoC,eAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,EAAE,GAAGT,WAAW,CAAEU,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAqBb,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACH,IAAlB,CAAtC;AACA,QAAM,CAACO,WAAD,EAAcC,mBAAd,EAAmCC,cAAnC,IAAqDd,QAAQ,CAAC,GAAD,CAAnE;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,cAAJ,EAAoB;AAClBG,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACH,cAAD,CAJM,CAAT;AAMA,QAAMI,eAAe,GAAGrB,WAAW,CAAC,MAAM;AACxCsB,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACE,EAAL,GAAUK,WAAtB;AACAN,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEf,mBADC;AAEPgB,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAER,WADL;AAEJS,QAAAA,MAAM,EAAEhB,IAAI,CAACE,EAFT;AAGJe,QAAAA,MAAM,EAAEf;AAHJ;AAFC,KAAD,CAAR;AAQD,GAVkC,EAUhC,CAACK,WAAD,EAAcL,EAAd,CAVgC,CAAnC;AAYA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEQ,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,KAAK,EAAEH,WADT;AAEE,IAAA,QAAQ,EAAEC,mBAFZ;AAGE,IAAA,IAAI,EAAE,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,CADF;AAYD,CApCD;;AAsCAT,WAAW,CAACmB,SAAZ,GAAwB;AACtBlB,EAAAA,IAAI,EAAEN,SAAS,CAACyB,KAAV,CAAgB;AACpBjB,IAAAA,EAAE,EAAER,SAAS,CAAC0B,MADM;AAEpBC,IAAAA,IAAI,EAAE3B,SAAS,CAAC4B,MAFI;AAGpBP,IAAAA,OAAO,EAAErB,SAAS,CAAC6B,MAHC;AAIpBC,IAAAA,SAAS,EAAE9B,SAAS,CAAC4B,MAJD;AAKpBG,IAAAA,QAAQ,EAAE/B,SAAS,CAACgC,OAAV,CAAkBhC,SAAS,CAAC4B,MAA5B,CALU;AAMpBK,IAAAA,MAAM,EAAEjC,SAAS,CAACgC,OAAV,CAAkBhC,SAAS,CAAC4B,MAA5B;AANY,GAAhB,EAOHM;AARmB,CAAxB;AAWA,eAAe7B,WAAf","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\r\nimport Form from \"antd/lib/form/Form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useInput from \"../../Hooks/useInput\";\r\nimport { Input, Button } from \"antd\";\r\nimport { ADD_COMMENT_REQUEST } from \"../../actions\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const { addCommentDone } = useSelector((state) => state.post);\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\" \");\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText(\"\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    console.log(post.id + commentText);\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        content: commentText,\r\n        postId: post.id,\r\n        userId: id,\r\n      },\r\n    });\r\n  }, [commentText, id]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Input.TextArea\r\n        value={commentText}\r\n        onChange={onChangeCommentText}\r\n        rows={4}\r\n      />\r\n      <Button type=\"primary\" htmlType=\"submit\">\r\n        삐약\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}
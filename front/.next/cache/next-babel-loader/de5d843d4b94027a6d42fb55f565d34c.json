{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\winco\\\\Desktop\\\\javascripts\\\\SKKUBird\\\\front\\\\Components\\\\PostCard\\\\CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from \"react\";\nimport Form from \"antd/lib/form/Form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Input, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport { ADD_COMMENT_REQUEST } from \"../../actions\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone;\n\n  var _useInput = useInput(\" \"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    console.log(post.id + commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, \"\\uC090\\uC57D\"));\n};\n\n_s(CommentForm, \"mM6CS628luhUq9CAqU3Lfmbq6g4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/Components/PostCard/CommentForm.js"],"names":["React","useCallback","useEffect","Form","useDispatch","useSelector","Input","Button","PropTypes","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","commentText","onChangeCommentText","setCommentText","onSubmitComment","console","log","type","data","content","postId","userId","propTypes","shape","number","User","object","string","createdAt","Comments","arrayOf","Images","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,mBAAT,QAAoC,eAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACjC,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,MAAMU,EAAE,GAAGT,WAAW,CAAC,UAAAU,KAAK;AAAA;;AAAA,6BAAIA,KAAK,CAACC,IAAN,CAAWC,EAAf,mDAAI,eAAeH,EAAnB;AAAA,GAAN,CAAtB;;AAFiC,qBAGNT,WAAW,CAAC,UAAAU,KAAK;AAAA,WAAIA,KAAK,CAACH,IAAV;AAAA,GAAN,CAHL;AAAA,MAGzBM,cAHyB,gBAGzBA,cAHyB;;AAAA,kBAI0BT,QAAQ,CAAC,GAAD,CAJlC;AAAA;AAAA,MAI1BU,WAJ0B;AAAA,MAIbC,mBAJa;AAAA,MAIQC,cAJR;;AAMjCnB,EAAAA,SAAS,CAAC,YAAM;AACf,QAAIgB,cAAJ,EAAoB;AACnBG,MAAAA,cAAc,CAAC,EAAD,CAAd;AACA;AACD,GAJQ,EAIN,CAACH,cAAD,CAJM,CAAT;AAMA,MAAMI,eAAe,GAAGrB,WAAW,CAAC,YAAM;AACzCsB,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACE,EAAL,GAAUK,WAAtB;AACAN,IAAAA,QAAQ,CAAC;AACRY,MAAAA,IAAI,EAAEf,mBADE;AAERgB,MAAAA,IAAI,EAAE;AACLC,QAAAA,OAAO,EAAER,WADJ;AAELS,QAAAA,MAAM,EAAEhB,IAAI,CAACE,EAFR;AAGLe,QAAAA,MAAM,EAAEf;AAHH;AAFE,KAAD,CAAR;AAQA,GAVkC,EAUhC,CAACK,WAAD,EAAcL,EAAd,CAVgC,CAAnC;AAYA,SACC,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEQ,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEH,WAAvB;AAAoC,IAAA,QAAQ,EAAEC,mBAA9C;AAAmE,IAAA,IAAI,EAAE,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,CADD;AAQA,CAhCD;;GAAMT,W;UACYP,W,EACNC,W,EACgBA,W,EACgCI,Q;;;KAJtDE,W;AAkCNA,WAAW,CAACmB,SAAZ,GAAwB;AACvBlB,EAAAA,IAAI,EAAEJ,SAAS,CAACuB,KAAV,CAAgB;AACrBjB,IAAAA,EAAE,EAAEN,SAAS,CAACwB,MADO;AAErBC,IAAAA,IAAI,EAAEzB,SAAS,CAAC0B,MAFK;AAGrBP,IAAAA,OAAO,EAAEnB,SAAS,CAAC2B,MAHE;AAIrBC,IAAAA,SAAS,EAAE5B,SAAS,CAAC0B,MAJA;AAKrBG,IAAAA,QAAQ,EAAE7B,SAAS,CAAC8B,OAAV,CAAkB9B,SAAS,CAAC0B,MAA5B,CALW;AAMrBK,IAAAA,MAAM,EAAE/B,SAAS,CAAC8B,OAAV,CAAkB9B,SAAS,CAAC0B,MAA5B;AANa,GAAhB,EAOHM;AARoB,CAAxB;AAWA,eAAe7B,WAAf","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\r\nimport Form from \"antd/lib/form/Form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Input, Button } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useInput from \"../../Hooks/useInput\";\r\nimport { ADD_COMMENT_REQUEST } from \"../../actions\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst id = useSelector(state => state.user.me?.id);\r\n\tconst { addCommentDone } = useSelector(state => state.post);\r\n\tconst [commentText, onChangeCommentText, setCommentText] = useInput(\" \");\r\n\r\n\tuseEffect(() => {\r\n\t\tif (addCommentDone) {\r\n\t\t\tsetCommentText(\"\");\r\n\t\t}\r\n\t}, [addCommentDone]);\r\n\r\n\tconst onSubmitComment = useCallback(() => {\r\n\t\tconsole.log(post.id + commentText);\r\n\t\tdispatch({\r\n\t\t\ttype: ADD_COMMENT_REQUEST,\r\n\t\t\tdata: {\r\n\t\t\t\tcontent: commentText,\r\n\t\t\t\tpostId: post.id,\r\n\t\t\t\tuserId: id,\r\n\t\t\t},\r\n\t\t});\r\n\t}, [commentText, id]);\r\n\r\n\treturn (\r\n\t\t<Form onFinish={onSubmitComment}>\r\n\t\t\t<Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4} />\r\n\t\t\t<Button type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t삐약\r\n\t\t\t</Button>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nCommentForm.propTypes = {\r\n\tpost: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n\t\tUser: PropTypes.object,\r\n\t\tcontent: PropTypes.string,\r\n\t\tcreatedAt: PropTypes.object,\r\n\t\tComments: PropTypes.arrayOf(PropTypes.object),\r\n\t\tImages: PropTypes.arrayOf(PropTypes.object),\r\n\t}).isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}
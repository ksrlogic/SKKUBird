{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchCommentPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../actions\"; // prettier-ignore\n\nimport { generateDummyPost } from \"../reducers/post\"; // function addPostAPI() {\n//   return axios.post(\"/api/post\");\n// }\n// function removePostAPI() {\n//   return axios.post(\"/api/post\");\n// }\n\nfunction addComment(_ref) {\n  var data;\n  return _regeneratorRuntime.wrap(function addComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          data = _ref.data;\n          _context.prev = 1;\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: data //\tresult.data 고정\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context.t0.response.data //\terr.response.data 고정\n\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 8]]);\n}\n\nfunction addPost(_ref2) {\n  var data, id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          data = _ref2.data;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortid.generate();\n          _context2.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: data\n            } //\tresult.data 고정\n\n          });\n\n        case 7:\n          _context2.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data //\terr.response.data 고정\n\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n\nfunction loadPost() {\n  return _regeneratorRuntime.wrap(function loadPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost()\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context3.t0.response.data //\terr.response.data 고정\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction removePost(_ref3) {\n  var data;\n  return _regeneratorRuntime.wrap(function removePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          data = _ref3.data;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context4.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: data //\tresult.data 고정\n\n          });\n\n        case 6:\n          _context4.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: data\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context4.t0.response.data //\terr.response.data 고정\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchCommentPost() {\n  return _regeneratorRuntime.wrap(function watchCommentPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchCommentPost), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Users/winco/Desktop/javascripts/SKKUBird/front/sagas/post.js"],"names":["addComment","addPost","loadPost","removePost","watchAddPost","watchLoadPost","watchRemovePost","watchCommentPost","postSaga","all","fork","put","takeLatest","delay","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","data","type","response","id","generate","content","LOAD_POSTS_REQUEST"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\n\r\nimport {\r\n\tADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n\tADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n\tREMOVE_POST_OF_ME, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE\r\n} from \"../actions\"; // prettier-ignore\r\nimport { generateDummyPost } from \"../reducers/post\";\r\n\r\n// function addPostAPI() {\r\n//   return axios.post(\"/api/post\");\r\n// }\r\n\r\n// function removePostAPI() {\r\n//   return axios.post(\"/api/post\");\r\n// }\r\n\r\nfunction* addComment({ data }) {\r\n\ttry {\r\n\t\t// const result = yield call(addPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata, //\tresult.data 고정\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\tdata: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\nfunction* addPost({ data }) {\r\n\ttry {\r\n\t\t// const result = yield call(addPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tconst id = shortid.generate();\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: {\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: data,\r\n\t\t\t}, //\tresult.data 고정\r\n\t\t});\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\tdata: id,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\tdata: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\nfunction* loadPost() {\r\n\ttry {\r\n\t\t// const result = yield call(loadPostAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\tdata: generateDummyPost(),\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\tdata: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction* removePost({ data }) {\r\n\ttry {\r\n\t\t// const result = yield call(removePostAPI);\r\n\t\tyield delay(1000);\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata, //\tresult.data 고정\r\n\t\t});\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\tdata,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\tdata: err.response.data, //\terr.response.data 고정\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchLoadPost() {\r\n\tyield takeLatest(LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga() {\r\n\tyield all([fork(watchAddPost), fork(watchCommentPost), fork(watchRemovePost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}